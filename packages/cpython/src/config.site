ac_cv_file__dev_ptmx=no
ac_cv_file__dev_ptc=no
ac_cv_func_dlopen=yes
ac_cv_lib_socket_socket=no
ac_cv_header_linux_vm_sockets_h=no
ac_cv_little_endian_double=yes
ax_cv_c_float_words_bigendian=no

ac_cv_func_rtpSpawn=no
ac_cv_func_wait3=no
ac_cv_func_wait4=no
ac_cv_func_getrusage=no

ac_cv_func_accept=no
ac_cv_func_accept4=no

# To use editline instead of readline.
ac_cv_with_editline=true

## I found some of these in Tools/wasm/config.site-wasm32-wasi -- william
# Written by Christian Heimes <christian@python.org>

# cannot be detected in cross builds
ac_cv_buggy_getaddrinfo=no

# WASI has no /dev/pt*
ac_cv_file__dev_ptmx=no
ac_cv_file__dev_ptc=no

# dummy readelf, WASI build does not need readelf.
ac_cv_prog_ac_ct_READELF=true

# get/setrlimit are not supported
ac_cv_header_sys_resource_h=no

# undefined symbols / unsupported features
ac_cv_func_eventfd=no

# WASI SDK 15.0 has no pipe syscall...
# But we just implement one ourselves in posix-zig.
# pipe2 is Linux-only (not available on macos), but
# we still leave it enabled, since python automatically
# falls back to pipe when pipe2 fails.
ac_cv_func_pipe=yes
ac_cv_func_pipe2=yes

# We have fork, but don't have fork1 though on macOS or Linux, so disable that
ac_cv_func_fork1=no

# WASI SDK 15.0 cannot create fifos and special files.
ac_cv_func_mkfifo=no
ac_cv_func_mkfifoat=no
ac_cv_func_mknod=no
ac_cv_func_mknodat=no

# fdopendir() fails on SDK 15.0,
# OSError: [Errno 28] Invalid argument: '.'
ac_cv_func_fdopendir=no

# WASI sockets are limited to operations on given socket fd and inet sockets.
# Disable AF_UNIX and AF_PACKET support, see socketmodule.h.
ac_cv_header_sys_un_h=no
ac_cv_header_netpacket_packet_h=no


###############################

# Realpath is stubbed with WASI, hence returns false answers. This
# causes _PyPathConfig_ComputeSysPath0 to break horribly at least when
# readline is built properly.  Yep, a day to figure this out:
ac_cv_func_realpath=no


# The clock_nanosleep and nanosleep functions both are provided by
# zig/musl, but they don't work at all.  The select function, which
# is what Modules/timemodule.c falls back to, does work, due to
# special code I wrote in our WASI layer.   Note that I think CPython
# and pyodide try to prefer these, but then they are really fake stub
# functions and time.sleep(...) is a no-op, which is also very bad.
# See https://github.com/python/cpython/commit/4ed8a9a589d2eee7442e0c9417515a707e504faa#diff-4d876038a7287c1070e54aa692759f86856e97df95a9361b2f7f04d637a2bb1eL30
ac_cv_func_clock_nanosleep=no
ac_cv_lib_rt_clock_nanosleep=no
ac_cv_func_nanosleep=no
ac_cv_lib_rt_nanosleep=no


# For some reason with wasm32-emscripten, etc., these get detected by autoconf as "yes":
# Obviously, inline assembly language won't work!
ac_cv_gcc_asm_for_x64=no
ac_cv_gcc_asm_for_x87=no
ac_cv_gcc_asm_for_mc68881=no

# memrchr is not in Zig's MUSL wasi, by the ac detection script thinks it is, hence get a stub
# which breaks things
ac_cv_func_memrchr=no

# epoll is linux only, and doesn't exit in WASM
ac_cv_func_epoll_create1=no
ac_cv_func_epoll_create=no

# Some low level fd copy functionality that isn't implemented:
ac_cv_func_splice=no
ac_cv_func_fdwalk=no

# We do not have this chflags or lchflags yet, but Python would expose it if we did.
# nodejs doesn't use the chflags system call anywhere either.
ac_cv_have_chflags=no
ac_cv_have_lchflags=no

# netdb functionality
# ac_cv_func_gethostbyname_r is a GNU extension.  We implement
# ac_cv_func_gethostbyname in our posix-zig package so do have it (and
# if you disable it, then the cpython build breaks).
ac_cv_func_gethostbyname_r=no
ac_cv_func_gethostbyname=yes
ac_cv_func_gethostbyaddr=yes

# Disable all of the process scheduling functionality, which nodejs doesn't provide
# either, and of course doesn't make sense in browser.
# NO -- as with ac_cv_func_gethostbyname above, doing this just completely breaks
# building Python, so instead we have functions that raise errors in our posix module
# for now, and later we'll use a nodejs extension module.
#ac_cv_header_sched_h=no
#ac_cv_func_sched_get_priority_max=no
#ac_cv_func_sched_rr_get_interval=no
#ac_cv_func_sched_setaffinity=no
#ac_cv_func_sched_setparam=no
#ac_cv_func_sched_setscheduler=no

# Modules
# In configure.ac, for the WASI and emscripten targets, they explicitly disable
# attempting to build a long list of modules, viewing it as impossible.  Of course,
# with posix-zig, there are probably NO MODULES that we can build and have fully
# working via nodejs... and we can have good stubs (at the expense of a slightly
# bigger binary).
# NO -- doing this has no effect -- the configure.ac script doesn't respect
# config.site for module config, unfortunately.  Instead, we will explicitly
# add an entry to Setup.local, which is what having this as yes would result in.
# py_cv_module__posixsubprocess=yes



