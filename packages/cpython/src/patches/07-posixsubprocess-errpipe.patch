--- native/Modules/_posixsubprocess.c	2022-08-05 07:45:18.000000000 -0700
+++ wasm/Modules/_posixsubprocess.c	2022-09-13 11:34:29.000000000 -0700
@@ -655,6 +655,17 @@
         _close_open_fds(3, py_fds_to_keep);
     }

+    /* Modification made for python-wasm. This errpipe_write
+       "must be closed at exec()" according to comments in
+       make_inheritable above, but it is NOT.  I think this
+       might somehow automatically happen normally due to
+       maybe something involving FD_CLOEXEC?  I don't know.
+       In any case, it's clearly not done explicitly below and
+       if we don't do this then subprocess.Popen will hang
+       waiting for errpipe_write to potentially report errors
+       above.  So we just close it explicitly here.  */
+    POSIX_CALL(close(errpipe_write));
+
     /* This loop matches the Lib/os.py _execvpe()'s PATH search when */
     /* given the executable_list generated by Lib/subprocess.py.     */
     saved_errno = 0;

--- native/Lib/subprocess.py	2022-08-05 07:45:18.000000000 -0700
+++ wasm/Lib/subprocess.py	2022-09-13 12:30:12.000000000 -0700
@@ -75,7 +75,7 @@
     _mswindows = True

 # wasm32-emscripten and wasm32-wasi do not support processes
-_can_fork_exec = sys.platform not in {"emscripten", "wasi"}
+_can_fork_exec = sys.platform not in {"emscripten"}

 if _mswindows:
     import _winapi
@@ -1857,8 +1857,14 @@
                     if not part or len(errpipe_data) > 50000:
                         break
             finally:
+                # Change for python-wasm: we instead close errpipe_read
+                # in _posixsubprocess.c, since otherwise we hit hangs.
+                # It's thus critical to NOT close it again here, or things will
+                # randomly hang, as is clear from the python test suite, e.g.,
+                # from test_uuid.py on Linux.
+
                 # be sure the FD is closed no matter what
-                os.close(errpipe_read)
+                # os.close(errpipe_read)

             if errpipe_data:
                 try:
